<h1>Blog</h1>
<div class="media">
    <div class="media-body">
        <h2 class="media-heading">v0.0.1 <small>July 12, 2013</small></h2>
        <p>
            Born out of a need to develop highly modularized web applications, I set out to create an alternative to the currently available stock of libraries and frameworks. My goals were simple:
        </p>
        <ol>
            <li>Provide a loosely coupled structure for highly modularized application using RequireJS.</li>
            <li>Provide meaningful contexts to each part in the MVC triad without imposing any restriction on object creations.</li>
            <li>Do just enough but keep it open ended and simple to use.</li>
        </ol>
        <p>CoccyxJS is still in its early development stage and not yet quite production ready. Parts are still missing and will be carefully added in keeping with CoccyxJS's original goals.</p>
        <p>But that doesn't mean that you shouldn't begin using CoccyxJs. That parts that are in place - routing, controllers, views, pub/sub - can readily be used if you are starting a new web application project. Just bear in mind that if you chose to do so at this stage in CoccyxJS's life cycle, that there are bugs, and that things are bound to change, including the API itself.</p>
        <p>Your feedback and suggestions will help shape CoccyxJS's future though I do reserve the right to refuse any suggestion that breaks the original design goals (see above) upon which I based CoccyxJS on.</p>
    </div>
    <div class="media-body">
        <h2 class="media-heading">"Big things have small beginnings" <small>July 12, 2013</small></h2>
        <p>... is a line from the movie Prometheus and embodies my inspiration for creating a totally new Web MVC application library.</p>
        <p>
            Born out of a need to develop highly modularized HTML5 web applications and my own dissatisfaction with the current crop of libraries and frameworks, I'm setting out to create an alternative for my own use and yours, if you so wish, with very acute goals in mind:
        </p>
        <ol>
            <li>Provide a structure for highly modularized, loosely couple applications using RequireJS, promoting a saner development and maintenance life cycle.</li>
            <li>Provide meaningful contexts to each part in the MVC triad without imposing any restriction on the objects used and avoiding any reliance on object prototypes other than those that are currently built into the objects that JavaScript already provides as of Ecmascript5.</li>
            <li>Breaking ties to the past. HTML5 rocks and older, non compliant browsers must die and hence they will not be supported.</li>
            <li>Do just enough... but keep it open ended, small and simple to use.</li>
        </ol>
        <p>Perhaps, of all the items in the above list, #4 is the most important to me. While breaking ties to the past and modularization and avoiding prototypal nightmares are indeed worthy goals, they would all be quite hollow and meaningless if the library itself, its API, was difficult to use. So the KISS principle, which I interpret as "Keep it simple and small, is of the highest order.</p>
        <p></p>
    </div>
</div>
